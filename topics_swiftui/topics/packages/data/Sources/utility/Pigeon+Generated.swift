// Autogenerated from Pigeon (v18.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonTopic {
  var id: Int64
  var title: String
  var description: String
  var dateTime: String

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonTopic? {
    let id = __pigeon_list[0] is Int64 ? __pigeon_list[0] as! Int64 : Int64(__pigeon_list[0] as! Int32)
    let title = __pigeon_list[1] as! String
    let description = __pigeon_list[2] as! String
    let dateTime = __pigeon_list[3] as! String

    return PigeonTopic(
      id: id,
      title: title,
      description: description,
      dateTime: dateTime
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      title,
      description,
      dateTime,
    ]
  }
}
private class FlutterTopicsRepositoryCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return PigeonTopic.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class FlutterTopicsRepositoryCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PigeonTopic {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FlutterTopicsRepositoryCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FlutterTopicsRepositoryCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FlutterTopicsRepositoryCodecWriter(data: data)
  }
}

class FlutterTopicsRepositoryCodec: FlutterStandardMessageCodec {
  static let shared = FlutterTopicsRepositoryCodec(readerWriter: FlutterTopicsRepositoryCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol FlutterTopicsRepositoryProtocol {
  func getTopics(completion: @escaping (Result<[PigeonTopic], FlutterError>) -> Void)
}
class FlutterTopicsRepository: FlutterTopicsRepositoryProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: FlutterStandardMessageCodec {
    return FlutterTopicsRepositoryCodec.shared
  }
  func getTopics(completion: @escaping (Result<[PigeonTopic], FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.domain.FlutterTopicsRepository.getTopics\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(FlutterError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! [PigeonTopic]
        completion(.success(result))
      }
    }
  }
}
